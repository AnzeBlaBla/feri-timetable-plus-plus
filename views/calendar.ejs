<%- include("partials/header") %>

<!-- Bootstrap Icons CSS -->
<link href='https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css' rel='stylesheet' />
<!-- FullCalendar CSS -->
<link href='https://cdn.jsdelivr.net/npm/fullcalendar@6.1.8/index.global.min.css' rel='stylesheet' />

<div class="container-fluid mt-4">
    <div class="row">
        <div class="col-12">
            <!-- Ultra Compact Header - Title, Groups, and Actions in One Row -->
            <div class="card mb-3">
                <div class="card-body py-2">
                    <div class="d-flex align-items-center flex-wrap gap-3">
                        <!-- Title and Filter ID -->
                        <div class="d-flex align-items-center gap-2">
                            <a href="/" class="text-decoration-none text-dark">
                                <h5 class="mb-0 hover-primary">FERI Timetable++</h5>
                            </a>
                            <small class="text-muted">ID: <%= filterId %></small>
                        </div>
                        
                        <!-- Groups Display -->
                        <div class="d-flex align-items-center gap-2 flex-grow-1">
                            <small class="text-muted fw-bold d-none d-md-inline">Groups:</small>
                            <button class="btn btn-sm btn-outline-primary" type="button" data-bs-toggle="modal" data-bs-target="#groupsModal" id="editGroupsBtn">
                                <i class="bi bi-pencil" id="editGroupsIcon"></i> <span id="editGroupsText" class="d-none d-sm-inline">Edit</span>
                            </button>
                            <div class="d-flex flex-wrap gap-1" id="selectedGroupsBadges">
                                <% Object.entries(selectedGroups).forEach(([course, groups]) => { %>
                                    <% const abbreviatedName = course.split(' ').map(word => word.charAt(0).toUpperCase()).join(''); %>
                                    <span class="badge bg-primary" title="<%= course %>: <%= groups.join(', ') %>">
                                        <%= abbreviatedName %> (<%= groups.length %>)
                                    </span>
                                <% }); %>
                            </div>
                        </div>
                        
                        <!-- Action Buttons -->
                        <div class="d-flex align-items-center gap-2 position-relative">
                            <button class="btn btn-sm btn-outline-info" type="button" id="shareBtn" title="Share current selection">
                                <i class="bi bi-share" id="shareIcon"></i> <span class="d-none d-sm-inline">Share</span>
                            </button>
                            <!-- Share Tooltip -->
                            <div class="position-absolute top-100 end-0 mt-2" id="shareTooltip" style="display: none; z-index: 1050; min-width: 300px;">
                                <div class="card shadow-lg">
                                    <div class="card-body p-2">
                                        <div class="d-flex align-items-center gap-2">
                                            <small class="text-muted fw-bold">Share:</small>
                                            <input type="text" class="form-control form-control-sm" id="shareUrlInput" readonly>
                                            <button class="btn btn-sm btn-outline-success" id="copyUrlBtn" title="Copy to clipboard">
                                                <i class="bi bi-copy"></i>
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <a href="<%= downloadUrl %>" class="btn btn-sm btn-success" title="Download .ics">
                                <i class="bi bi-download"></i> <span class="d-none d-md-inline">Download</span>
                            </a>
                        </div>
                    </div>
                </div>
            </div>



            <!-- Groups Selection Modal -->
            <div class="modal fade" id="groupsModal" tabindex="-1" aria-labelledby="groupsModalLabel" aria-hidden="true">
                <div class="modal-dialog modal-xl modal-dialog-scrollable">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title" id="groupsModalLabel">
                                <i class="bi bi-pencil me-2"></i>Edit Groups - FERI Timetable++
                            </h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body">
                            <form id="groupSelectionForm" method="POST" action="/groups/submit">
                                <input type="hidden" name="filterId" value="<%= filterId %>">
                                
                                <div class="row g-3">
                                    <% courses.forEach((course, index) => { %>
                                        <div class="col-md-6 col-lg-4">
                                            <div class="card h-100">
                                                <div class="card-body p-3">
                                                    <h6 class="card-title text-primary mb-2"><%= course %></h6>
                                                    <div class="form-group">
                                                        <div class="row g-1">
                                                            <% courseGroups[course].sort().forEach((group, groupIndex) => { %>
                                                                <div class="col-6 col-sm-4">
                                                                    <div class="form-check form-check-sm">
                                                                        <input 
                                                                            class="form-check-input" 
                                                                            type="checkbox" 
                                                                            name="selectedGroups[<%= course %>][]" 
                                                                            value="<%= group %>" 
                                                                            id="edit_group_<%= index %>_<%= groupIndex %>"
                                                                            <% if (selectedGroups[course] && selectedGroups[course].includes(group)) { %>checked<% } %>
                                                                        >
                                                                        <label class="form-check-label small" for="edit_group_<%= index %>_<%= groupIndex %>">
                                                                            <%= group %>
                                                                        </label>
                                                                    </div>
                                                                </div>
                                                            <% }); %>
                                                        </div>
                                                    </div>
                                                    <div class="mt-2">
                                                        <button 
                                                            type="button" 
                                                            class="btn btn-outline-primary btn-sm me-1"
                                                            onclick="selectAllForCourse('<%= course %>')"
                                                        >
                                                            All
                                                        </button>
                                                        <button 
                                                            type="button" 
                                                            class="btn btn-outline-secondary btn-sm"
                                                            onclick="deselectAllForCourse('<%= course %>')"
                                                        >
                                                            None
                                                        </button>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    <% }); %>
                                </div>
                            </form>
                        </div>
                        <div class="modal-footer">
                            <div class="text-muted small me-auto">
                                Changes are applied live - no need to save manually
                            </div>
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Calendar -->
            <div class="card">
                <div class="card-body p-0">
                    <div id="calendar"></div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- FullCalendar JS -->
<script src='https://cdn.jsdelivr.net/npm/fullcalendar@6.1.8/index.global.min.js'></script>

<script>
// Helper functions for group selection
function selectAllForCourse(course) {
    const checkboxes = document.querySelectorAll(`input[name="selectedGroups[${course}][]"]`);
    checkboxes.forEach(checkbox => {
        checkbox.checked = true;
    });
    updateSelectedGroupsBadges();
    
    // Update URL immediately
    clearTimeout(window.urlUpdateTimeout);
    window.urlUpdateTimeout = setTimeout(() => {
        try {
            updateURL();
            console.log('URL updated after selectAll for:', course);
        } catch (error) {
            console.error('Error updating URL after selectAll:', error);
        }
    }, 150);
    
    // Trigger live calendar update
    clearTimeout(window.updateTimeout);
    window.updateTimeout = setTimeout(() => {
        const form = document.getElementById('groupSelectionForm');
        if (form && window.updateCalendarLive) {
            window.updateCalendarLive();
        }
    }, 300);
}

function deselectAllForCourse(course) {
    const checkboxes = document.querySelectorAll(`input[name="selectedGroups[${course}][]"]`);
    checkboxes.forEach(checkbox => {
        checkbox.checked = false;
    });
    updateSelectedGroupsBadges();
    
    // Update URL immediately
    clearTimeout(window.urlUpdateTimeout);
    window.urlUpdateTimeout = setTimeout(() => {
        try {
            updateURL();
            console.log('URL updated after deselectAll for:', course);
        } catch (error) {
            console.error('Error updating URL after deselectAll:', error);
        }
    }, 150);
    
    // Trigger live calendar update
    clearTimeout(window.updateTimeout);
    window.updateTimeout = setTimeout(() => {
        const form = document.getElementById('groupSelectionForm');
        if (form && window.updateCalendarLive) {
            window.updateCalendarLive();
        }
    }, 300);
}

// Function to abbreviate course names (first letter of each word)
function abbreviateCourseName(courseName) {
    return courseName
        .split(' ')
        .map(word => word.charAt(0).toUpperCase())
        .join('');
}

function updateSelectedGroupsBadges() {
    const form = document.getElementById('groupSelectionForm');
    const badgesContainer = document.getElementById('selectedGroupsBadges');
    
    // Clear current badges
    badgesContainer.innerHTML = '';
    
    // Get all selected groups
    const courses = <%- JSON.stringify(courses) %>;
    const selectedGroups = {};
    
    courses.forEach(course => {
        const checkboxes = form.querySelectorAll(`input[name="selectedGroups[${course}][]"]:checked`);
        if (checkboxes.length > 0) {
            selectedGroups[course] = Array.from(checkboxes).map(cb => cb.value);
        }
    });
    
    // Create new badges with abbreviated names
    Object.entries(selectedGroups).forEach(([course, groups]) => {
        const badge = document.createElement('span');
        badge.className = 'badge bg-primary';
        badge.title = `${course}: ${groups.join(', ')}`;
        const abbreviatedName = abbreviateCourseName(course);
        badge.textContent = `${abbreviatedName} (${groups.length})`;
        badgesContainer.appendChild(badge);
    });
    
    if (Object.keys(selectedGroups).length === 0) {
        const noBadge = document.createElement('span');
        noBadge.className = 'badge bg-secondary';
        noBadge.textContent = 'No groups selected';
        badgesContainer.appendChild(noBadge);
    }
}

document.addEventListener('DOMContentLoaded', function() {
    const calendarEl = document.getElementById('calendar');
    
    // Events data from server
    const events = <%- JSON.stringify(events) %>;
    
    // Function to get saved view preference
    function getSavedView() {
        const savedView = localStorage.getItem('feri-calendar-view');
        // Default based on screen size if no saved preference
        if (!savedView) {
            return window.innerWidth < 768 ? 'listWeek' : 'timeGridWeek';
        }
        return savedView;
    }
    
    // Function to save view preference
    function saveViewPreference(viewName) {
        localStorage.setItem('feri-calendar-view', viewName);
    }
    
    const calendar = new FullCalendar.Calendar(calendarEl, {
        initialView: getSavedView(),
        firstDay: 1, // Start week on Monday (0 = Sunday, 1 = Monday)
        timeZone: 'local', // Use local timezone instead of UTC
        nowIndicator: true, // Show current time indicator
        //locale: 'sl', // Slovenian locale
        eventTimeFormat: {
            hour: '2-digit',
            minute: '2-digit',
            hour12: false // 24-hour format
        },
        slotLabelFormat: {
            hour: '2-digit',
            minute: '2-digit',
            hour12: false // 24-hour format for time slots
        },
        headerToolbar: {
            left: 'prev,next today',
            center: 'title',
            right: 'dayGridMonth,timeGridWeek,timeGridDay,listWeek'
        },
        views: {
            timeGridWeek: {
                slotMinTime: '07:00:00',
                slotMaxTime: '21:00:00'
            },
            timeGridDay: {
                slotMinTime: '07:00:00',
                slotMaxTime: '21:00:00'
            }
        },
        businessHours: {
            daysOfWeek: [1, 2, 3, 4, 5], // Monday - Friday
            startTime: '08:00',
            endTime: '20:00'
        },
        weekends: true,
        events: events,
        eventDisplay: 'block',
        displayEventTime: true,
        height: 'auto',
        
        // Event click handler
        eventClick: function(info) {
            const event = info.event;
            const props = event.extendedProps;
            
            // Create modal content
            const modalContent = `
                <div class="modal fade" id="eventModal" tabindex="-1">
                    <div class="modal-dialog">
                        <div class="modal-content">
                            <div class="modal-header" style="background-color: ${event.backgroundColor}; color: white;">
                                <h5 class="modal-title">${event.title}</h5>
                                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
                            </div>
                            <div class="modal-body">
                                <div class="row">
                                    <div class="col-sm-4"><strong>Course:</strong></div>
                                    <div class="col-sm-8">${props.course}</div>
                                </div>
                                <div class="row">
                                    <div class="col-sm-4"><strong>Type:</strong></div>
                                    <div class="col-sm-8">${props.type}</div>
                                </div>
                                <div class="row">
                                    <div class="col-sm-4"><strong>Group:</strong></div>
                                    <div class="col-sm-8">${props.group}</div>
                                </div>
                                ${props.persons ? `
                                <div class="row">
                                    <div class="col-sm-4"><strong>Instructors:</strong></div>
                                    <div class="col-sm-8">${props.persons}</div>
                                </div>
                                ` : ''}
                                ${props.location ? `
                                <div class="row">
                                    <div class="col-sm-4"><strong>Location:</strong></div>
                                    <div class="col-sm-8">${props.location}</div>
                                </div>
                                ` : ''}
                                <div class="row">
                                    <div class="col-sm-4"><strong>Time:</strong></div>
                                    <div class="col-sm-8">
                                        ${event.start.toLocaleString()} - ${event.end.toLocaleString()}
                                    </div>
                                </div>
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                            </div>
                        </div>
                    </div>
                </div>
            `;
            
            // Remove existing modal if any
            const existingModal = document.getElementById('eventModal');
            if (existingModal) {
                existingModal.remove();
            }
            
            // Add modal to body
            document.body.insertAdjacentHTML('beforeend', modalContent);
            
            // Show modal
            const modal = new bootstrap.Modal(document.getElementById('eventModal'));
            modal.show();
            
            // Clean up modal after it's hidden
            document.getElementById('eventModal').addEventListener('hidden.bs.modal', function() {
                this.remove();
            });
        },
        
        // Save view preference when user changes view
        datesSet: function(info) {
            // Only save if this is a user-initiated change, not initial load
            if (calendar.isInitialized) {
                saveViewPreference(info.view.type);
                console.log('Saved view preference:', info.view.type);
            }
        },
        
        // Responsive settings
        windowResize: function() {
            // Only auto-change view if user hasn't set a preference
            const savedView = localStorage.getItem('feri-calendar-view');
            if (!savedView) {
                if (window.innerWidth < 768) {
                    calendar.changeView('listWeek');
                } else {
                    calendar.changeView('timeGridWeek');
                }
            }
        }
    });
    
    // Initial view is already set from getSavedView(), no need to override
    
    calendar.render();
    
    // Mark calendar as initialized after initial render to avoid saving initial view
    setTimeout(() => {
        calendar.isInitialized = true;
        console.log('Calendar initialized, will now save view changes');
    }, 100);
    
    // Update current time indicator every minute
    setInterval(() => {
        calendar.getOption('nowIndicator') && calendar.render();
    }, 60000); // Update every minute
    

    
    // Add Bootstrap modal event listeners for better UX
    const groupsModal = document.getElementById('groupsModal');
    const editGroupsBtn = document.getElementById('editGroupsBtn');
    let editGroupsIcon = document.getElementById('editGroupsIcon');
    let editGroupsText = document.getElementById('editGroupsText');
    
    // Store references globally for restoreEditButton function
    window.editGroupsIcon = editGroupsIcon;
    window.editGroupsText = editGroupsText;
    
    if (groupsModal && editGroupsBtn) {
        groupsModal.addEventListener('show.bs.modal', function() {
            // Update button appearance when opening
            editGroupsBtn.classList.remove('btn-outline-primary');
            editGroupsBtn.classList.add('btn-outline-danger');
            
            // Get fresh references to the icon and text elements
            const currentIcon = document.getElementById('editGroupsIcon');
            const currentText = document.getElementById('editGroupsText');
            
            if (currentIcon && currentText) {
                currentIcon.classList.remove('bi-pencil');
                currentIcon.classList.add('bi-x');
                currentText.textContent = 'Close';
            }
            
            // Update button to close modal when clicked
            editGroupsBtn.setAttribute('data-bs-dismiss', 'modal');
        });
        

        
        groupsModal.addEventListener('hide.bs.modal', function() {
            // URL is already updated live, but ensure it's current on modal close
            console.log('Modal closing, ensuring URL is current...');
            console.log('Current URL:', window.location.href);
            try {
                // Just ensure URL is current (should already be updated from live changes)
                updateURL();
                console.log('Final URL confirmed:', window.location.href);
            } catch (error) {
                console.error('Error confirming URL on modal close:', error);
            }
            
            // Restore button appearance when closing
            restoreEditButton();
        });
                    
        
        function restoreEditButton() {
            editGroupsBtn.classList.remove('btn-outline-danger');
            editGroupsBtn.classList.add('btn-outline-primary');
            editGroupsBtn.innerHTML = '<i class="bi bi-pencil" id="editGroupsIcon"></i> <span id="editGroupsText" class="d-none d-sm-inline">Edit</span>';
            editGroupsBtn.disabled = false;
            
            // Remove modal dismiss attribute and restore modal toggle
            editGroupsBtn.removeAttribute('data-bs-dismiss');
            editGroupsBtn.setAttribute('data-bs-toggle', 'modal');
            editGroupsBtn.setAttribute('data-bs-target', '#groupsModal');
            
            // Update global references
            editGroupsIcon = document.getElementById('editGroupsIcon');
            editGroupsText = document.getElementById('editGroupsText');
            window.editGroupsIcon = editGroupsIcon;
            window.editGroupsText = editGroupsText;
        }
        
        // Make restoreEditButton globally available
        window.restoreEditButton = restoreEditButton;
    }
    
    // Share button functionality (inline tooltip)
    const shareBtn = document.getElementById('shareBtn');
    const shareTooltip = document.getElementById('shareTooltip');
    const shareUrlInput = document.getElementById('shareUrlInput');
    const copyUrlBtn = document.getElementById('copyUrlBtn');
    
    if (shareBtn && shareTooltip && shareUrlInput && copyUrlBtn) {
        // Show/hide share tooltip
        shareBtn.addEventListener('click', function(e) {
            e.stopPropagation();
            
            if (shareTooltip.style.display === 'none') {
                // Update URL first to get current state
                console.log('Share button clicked - updating URL first');
                try {
                    updateURL();
                    // Wait a bit for the URL to update, then populate the input
                    setTimeout(() => {
                        shareUrlInput.value = window.location.href;
                        console.log('Share input populated with:', window.location.href);
                    }, 50);
                } catch (error) {
                    console.error('Error updating URL for sharing:', error);
                    shareUrlInput.value = window.location.href; // fallback
                }
                
                // Show tooltip
                shareTooltip.style.display = 'block';
                shareUrlInput.select();
                
                // Update button appearance
                shareBtn.classList.remove('btn-outline-info');
                shareBtn.classList.add('btn-info');
                const shareIcon = document.getElementById('shareIcon');
                if (shareIcon) {
                    shareIcon.classList.remove('bi-share');
                    shareIcon.classList.add('bi-link-45deg');
                }
            } else {
                hideShareTooltip();
            }
        });
        
        // Hide tooltip when clicking outside
        document.addEventListener('click', function(e) {
            if (!shareBtn.contains(e.target) && !shareTooltip.contains(e.target)) {
                hideShareTooltip();
            }
        });
        
        // Function to hide share tooltip
        function hideShareTooltip() {
            shareTooltip.style.display = 'none';
            
            // Restore button appearance
            shareBtn.classList.remove('btn-info');
            shareBtn.classList.add('btn-outline-info');
            const shareIcon = document.getElementById('shareIcon');
            if (shareIcon) {
                shareIcon.classList.remove('bi-link-45deg');
                shareIcon.classList.add('bi-share');
            }
        }
        
        // Copy URL to clipboard
        copyUrlBtn.addEventListener('click', async function() {
            try {
                await navigator.clipboard.writeText(shareUrlInput.value);
                
                // Visual feedback
                const originalText = copyUrlBtn.innerHTML;
                copyUrlBtn.innerHTML = '<i class="bi bi-check"></i>';
                copyUrlBtn.classList.remove('btn-outline-success');
                copyUrlBtn.classList.add('btn-success');
                
                // Reset after 2 seconds
                setTimeout(() => {
                    copyUrlBtn.innerHTML = originalText;
                    copyUrlBtn.classList.remove('btn-success');
                    copyUrlBtn.classList.add('btn-outline-success');
                }, 2000);
                
                console.log('URL copied to clipboard:', shareUrlInput.value);
            } catch (error) {
                console.error('Failed to copy URL:', error);
                
                // Fallback: select text for manual copy
                shareUrlInput.select();
                shareUrlInput.setSelectionRange(0, 99999); // For mobile devices
                
                // Visual feedback for fallback
                const originalText = copyUrlBtn.innerHTML;
                copyUrlBtn.innerHTML = '<i class="bi bi-exclamation-triangle"></i>';
                copyUrlBtn.classList.remove('btn-outline-success');
                copyUrlBtn.classList.add('btn-warning');
                
                // Reset after 3 seconds
                setTimeout(() => {
                    copyUrlBtn.innerHTML = originalText;
                    copyUrlBtn.classList.remove('btn-warning');
                    copyUrlBtn.classList.add('btn-outline-success');
                }, 3000);
            }
        });
    }
    
    // Function to update URL with current selections (using base64url encoding)
    function updateURL() {
        console.log('=== updateURL called ===');
        const form = document.getElementById('groupSelectionForm');
        if (!form) {
            console.error('Form not found for URL update');
            return;
        }
        
        const formData = new FormData(form);
        const filterId = formData.get('filterId');
        console.log('Filter ID:', filterId);
        
        // Build selectedGroups object from form data
        const selectedGroups = {};
        for (const [key, value] of formData.entries()) {
            if (key.startsWith('selectedGroups[') && key.endsWith('][]')) {
                const courseMatch = key.match(/selectedGroups\[(.+?)\]\[\]/);
                if (courseMatch) {
                    const course = courseMatch[1];
                    if (!selectedGroups[course]) {
                        selectedGroups[course] = [];
                    }
                    selectedGroups[course].push(value);
                }
            }
        }
        console.log('Selected groups object:', selectedGroups);
        
        // Encode groups using base64url (same as backend)
        // First convert to UTF-8 bytes, then base64 encode to handle special characters
        const jsonString = JSON.stringify(selectedGroups);
        console.log('JSON string to encode:', jsonString);
        
        let encodedGroups;
        try {
            // Use TextEncoder for proper UTF-8 encoding
            const encoder = new TextEncoder();
            const utf8Bytes = encoder.encode(jsonString);
            
            // Convert bytes to binary string for btoa
            let binaryString = '';
            for (let i = 0; i < utf8Bytes.length; i++) {
                binaryString += String.fromCharCode(utf8Bytes[i]);
            }
            
            encodedGroups = btoa(binaryString)
                .replace(/\+/g, '-')
                .replace(/\//g, '_')
                .replace(/=/g, '');
                
            console.log('Successfully encoded groups:', encodedGroups);
        } catch (encodeError) {
            console.error('Encoding error:', encodeError);
            console.error('Problematic JSON:', jsonString);
            
            // Fallback: try with URL encoding first
            try {
                const urlEncodedJson = encodeURIComponent(jsonString);
                encodedGroups = btoa(urlEncodedJson)
                    .replace(/\+/g, '-')
                    .replace(/\//g, '_')
                    .replace(/=/g, '');
                console.log('Fallback encoding successful:', encodedGroups);
            } catch (fallbackError) {
                console.error('Fallback encoding also failed:', fallbackError);
                // Use a simple hash as last resort
                encodedGroups = btoa(JSON.stringify(Object.keys(selectedGroups)))
                    .replace(/\+/g, '-')
                    .replace(/\//g, '_')
                    .replace(/=/g, '');
                console.log('Using course names only as fallback:', encodedGroups);
            }
        }
        console.log('Encoded groups:', encodedGroups);
        
        // Update URL to match backend route format: /calendar/:filterId/:encodedGroups
        const newUrl = `/calendar/${filterId}/${encodedGroups}`;
        const currentUrl = window.location.pathname;
        console.log('Current URL:', currentUrl);
        console.log('New URL:', newUrl);
        console.log('URLs different?', currentUrl !== newUrl);
        
        // Always update the URL with pushState to ensure browser address bar updates
        const timestamp = Date.now();
        window.history.pushState({ 
            filterId, 
            selectedGroups, 
            timestamp 
        }, document.title, newUrl);
        
        console.log('pushState called with timestamp:', timestamp);
        console.log('Browser URL should now be:', window.location.href);
        
        // Also update the document title to show active groups count
        const selectedCount = Object.values(selectedGroups).reduce((sum, groups) => sum + groups.length, 0);
        const newTitle = `FERI Timetable++ (${selectedCount} groups selected)`;
        document.title = newTitle;
        console.log('Document title updated to:', newTitle);
        
        // Verify the change took effect
        setTimeout(() => {
            console.log('=== Verification after 100ms ===');
            console.log('Final browser URL:', window.location.href);
            console.log('Final document title:', document.title);
            console.log('=== updateURL complete ===');
        }, 100);
    }
    
    // Make updateURL globally available
    window.updateURL = updateURL;
    
    // Add event listeners for group selection form
    const form = document.getElementById('groupSelectionForm');
    if (form) {
        // Add change listeners to all checkboxes for live updates
        const checkboxes = form.querySelectorAll('input[type="checkbox"]');
        checkboxes.forEach(checkbox => {
            checkbox.addEventListener('change', function() {
                console.log('Checkbox changed:', this.name, '=', this.value, 'checked:', this.checked);
                
                // Update badges immediately
                updateSelectedGroupsBadges();
                
                // Update URL immediately for live sharing
                clearTimeout(window.urlUpdateTimeout);
                window.urlUpdateTimeout = setTimeout(() => {
                    try {
                        updateURL();
                        console.log('URL updated live after checkbox change');
                    } catch (error) {
                        console.error('Error updating URL live:', error);
                    }
                }, 150); // Faster URL update
                
                // Debounce the calendar update to avoid too many requests
                clearTimeout(window.updateTimeout);
                window.updateTimeout = setTimeout(() => {
                    updateCalendarLive();
                }, 300); // 300ms debounce
            });
        });
        
        // Function to update calendar with current form state
        window.updateCalendarLive = function() {

            console.log('updateCalendarLive called');
            const form = document.getElementById('groupSelectionForm');
            if (!form) {
                console.error('Form not found for calendar update');
                return;
            }
            
            const formData = new FormData(form);
            const jsonData = {
                filterId: formData.get('filterId'),
                selectedGroups: {}
            };
            console.log('Form filterId:', jsonData.filterId);
            
            // Convert FormData to proper selectedGroups object
            for (const [key, value] of formData.entries()) {
                if (key.startsWith('selectedGroups[') && key.endsWith('][]')) {
                    const courseMatch = key.match(/selectedGroups\[(.+?)\]\[\]/);
                    if (courseMatch) {
                        const course = courseMatch[1];
                        if (!jsonData.selectedGroups[course]) {
                            jsonData.selectedGroups[course] = [];
                        }
                        jsonData.selectedGroups[course].push(value);
                    }
                }
            }
            console.log('Processed selectedGroups:', jsonData.selectedGroups);
            
            // Get the filter ID
            const filterId = jsonData.filterId;
            
            // Create query params for selected groups
            const queryParams = new URLSearchParams();
            Object.entries(jsonData.selectedGroups).forEach(([course, groups]) => {
                groups.forEach(group => {
                    queryParams.append(`selectedGroups[${course}][]`, group);
                });
            });
            
            // Fetch updated calendar data
            console.log('Fetching calendar data with query:', queryParams.toString());
            fetch(`/api/calendar/${filterId}?${queryParams.toString()}`)
            .then(response => response.json())
            .then(data => {
                console.log('Received calendar data:', data);
                // Update calendar events
                calendar.removeAllEventSources();
                calendar.addEventSource(data.events);
                calendar.refetchEvents();
            })
            .catch(error => {
                console.error('Error refreshing calendar:', error);
                console.error('Failed query params:', queryParams.toString());
            });
        }
        
        // Make calendar available globally for updates
        window.calendar = calendar;
        
        // Prevent default form submission since we handle it with AJAX
        form.addEventListener('submit', function(e) {
            e.preventDefault();
        });
    }
    
    // Add some custom styling
    const style = document.createElement('style');
    style.textContent = `
        .fc-event {
            font-size: 0.85em;
            padding: 2px;
            cursor: pointer !important;
            transition: opacity 0.2s ease;
        }
        
        .fc-event:hover {
            opacity: 0.8;
            transform: translateY(-1px);
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        
        .fc-event-title {
            font-weight: 600;
        }
        
        .fc-daygrid-event {
            white-space: normal;
            cursor: pointer !important;
        }
        
        .fc-list-event {
            cursor: pointer !important;
        }
        
        .fc-list-event:hover {
            background-color: rgba(0,0,0,0.05);
        }
        
        /* Enhanced now indicator styling */
        .fc-timegrid-now-indicator-line {
            border-color: #dc3545 !important;
            border-width: 2px !important;
        }
        
        .fc-timegrid-now-indicator-arrow {
            border-color: #dc3545 !important;
            border-width: 6px !important;
        }
        
        /* Current time slot highlighting */
        .fc-timegrid-slot[data-time] {
            position: relative;
        }
        
        /* Clickable title hover effect */
        .hover-primary:hover {
            color: #0d6efd !important;
            transition: color 0.2s ease;
        }
        
        /* Static transparency modal styling */
        #groupsModal .modal-content {
            background-color: rgba(255, 255, 255, 0.65) !important;
            backdrop-filter: blur(6px);
            -webkit-backdrop-filter: blur(6px);
            border: 1px solid rgba(255, 255, 255, 0.3);
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.15);
            border-radius: 16px;
        }
        
        #groupsModal .modal-header {
            background: linear-gradient(135deg, rgba(3, 50, 200, 1), rgba(13, 110, 253, 0.85)) !important;
            color: white;
            border-bottom: 1px solid rgba(255, 255, 255, 0.15);
            border-radius: 16px 16px 0 0;
            backdrop-filter: blur(4px);
            -webkit-backdrop-filter: blur(4px);
        }
        
        #groupsModal .modal-body {
            background-color: transparent;
        }
        
        #groupsModal .modal-footer {
            background-color: rgba(248, 249, 250, 0.9);
            border-top: 1px solid rgba(0, 0, 0, 0.1);
            border-radius: 0 0 16px 16px;
        }
        
        /* Make content cards fully opaque and normal */
        #groupsModal .card {
            background-color: #ffffff !important;
            border: 1px solid #dee2e6;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }
        
        /* Keep backdrop but make it less opaque for better calendar visibility */
        .modal-backdrop {
            background-color: rgba(0, 0, 0, 0.2) !important;
        }
        
        @media (max-width: 767px) {
            .fc-header-toolbar {
                flex-direction: column;
                gap: 10px;
            }
            
            .fc-toolbar-chunk {
                display: flex;
                justify-content: center;
            }
            
            #groupsModal .modal-dialog {
                margin: 0.5rem;
                max-width: none;
            }
            
            #groupsModal .modal-content {
                background-color: rgba(255, 255, 255, 0.98);
            }
        }
    `;
    document.head.appendChild(style);
});
</script>

<%- include("partials/footer") %>